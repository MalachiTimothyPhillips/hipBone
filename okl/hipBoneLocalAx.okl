/*

  The MIT License (MIT)

  Copyright (c) 2020 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#if p_N<=2
#define USE_3D_SHMEM 1
#else
#define USE_3D_SHMEM 0
#endif

#if !USE_3D_SHMEM


//This kernel processes 2D slices of the element in shmem and uses register arrays
// to store the element itself. May be slower for low order but allows us to run
// high degree efficiently

//TODO: Needs tuning for ROCm 4.0
#if p_N==1
#define p_NelementsPerBlk 9
#elif p_N==2
#define p_NelementsPerBlk 4
#elif p_N==3
#define p_NelementsPerBlk 3
#elif p_N==4
#define p_NelementsPerBlk 2
#elif p_N==5
#define p_NelementsPerBlk 3
#elif p_N==6
#define p_NelementsPerBlk 1
#elif p_N==7
#define p_NelementsPerBlk 1
#elif p_N==8
#define p_NelementsPerBlk 3
#elif p_N==9
#define p_NelementsPerBlk 1
#elif p_N==10
#define p_NelementsPerBlk 1
#elif p_N==11
#define p_NelementsPerBlk 1
#elif p_N==12
#define p_NelementsPerBlk 1
#elif p_N==13
#define p_NelementsPerBlk 1
#elif p_N==14
#define p_NelementsPerBlk 1
#elif p_N==15
#define p_NelementsPerBlk 1
#else //untuned
#define p_NelementsPerBlk 1
#endif

//padding for bank conflicts
#if p_Nq==16 || p_Nq==8
#define p_pad 1
#else
#define p_pad 0
#endif

@kernel void hipBoneLocalAx_v0(const dlong Nelements,
			       @restrict const  dlong  *  elementList,
			       @restrict const  dfloat *  ggeo,
			       @restrict const  dfloat *  D,
			       const dfloat lambda,
			       @restrict const  dfloat *  q,
			       @restrict dfloat *  Aq){

  for(dlong eo=0; eo<Nelements; eo+=p_NelementsPerBlk; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq+p_pad];
    @shared dfloat s_DT[p_Nq][p_Nq+p_pad];
    @shared dfloat s_q[p_NelementsPerBlk][p_Nq][p_Nq+p_pad];
    @shared dfloat s_v[p_NelementsPerBlk][p_Nq][p_Nq+p_pad];
    @shared dfloat s_w[p_NelementsPerBlk][p_Nq][p_Nq+p_pad];

    @exclusive dfloat r_GDut, r_Auk;

    // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_u[p_Nq];
    // array for results Au(i,j,0:N)
    @exclusive dfloat r_Au[p_Nq];

    @exclusive dlong r_e, element;

    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          //load D into local memory
          // s_D[i][j] = d \phi_i at node j
          if (es==0) {
            const dfloat Dji = D[p_Nq*j+i];// D is column major
            s_D[j][i] = Dji;
            s_DT[i][j] = Dji;
          }

          r_e = es+eo;

          if(r_e<Nelements){
            element = elementList[r_e];

            const dlong base = i + j*p_Nq + element*p_Np;

            // load pencil of u into register
#pragma unroll p_Nq
            for (int k=0;k<p_Nq;k++) {
	      r_u[k] = q[base + k*p_Nq*p_Nq];
	    }


#pragma unroll p_Nq
            for (int k=0;k<p_Nq;k++) {
              r_Au[k] = 0.0;
            }
          }
        }
      }
    }

    // Layer by layer
#if OCCA_USE_CUDA==1
    // only force some type of unrolling in CUDA mode
#pragma unroll p_Nq
#endif
    for(int k = 0;k < p_Nq; k++){

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){
            // share u(:,:,k)
            s_q[es][j][i] = r_u[k];
          }
        }
      }

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

            dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

            if(r_e<Nelements){
              // prefetch geometric factors
              const dlong gbase = element*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

              r_GwJ = ggeo[gbase+p_GWJID*p_Np];
              r_G00 = ggeo[gbase+p_G00ID*p_Np];
              r_G01 = ggeo[gbase+p_G01ID*p_Np];
              r_G11 = ggeo[gbase+p_G11ID*p_Np];
              r_G12 = ggeo[gbase+p_G12ID*p_Np];
              r_G02 = ggeo[gbase+p_G02ID*p_Np];
              r_G22 = ggeo[gbase+p_G22ID*p_Np];
            }

            dfloat ur = 0.f;
            dfloat us = 0.f;
            dfloat ut = 0;

#pragma unroll p_Nq
            for (int m=0;m<p_Nq;m++) {
              ut += s_DT[m][k]*r_u[m];
            }

#pragma unroll p_Nq
            for (int m=0;m<p_Nq;m++) {
              ur   += s_DT[m][i]*s_q[es][j][m];
              us   += s_DT[m][j]*s_q[es][m][i];
            }

            s_w[es][j][i] = (r_G01*ur + r_G11*us + r_G12*ut);
            s_v[es][j][i] = (r_G00*ur + r_G01*us + r_G02*ut);
            r_GDut        = (r_G02*ur + r_G12*us + r_G22*ut);

            r_Auk = r_GwJ*lambda*r_u[k];
          }
        }
      }

      for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
        for(int j=0;j<p_Nq;++j;@inner(1)){
          for(int i=0;i<p_Nq;++i;@inner(0)){

#pragma unroll p_Nq
            for (int m=0;m<p_Nq;m++) {
              r_Au[m] += s_D[k][m]*r_GDut;
            }

#pragma unroll p_Nq
            for (int m=0;m<p_Nq;m++) {
              r_Auk   += s_D[m][j]*s_w[es][m][i];
              r_Auk   += s_D[m][i]*s_v[es][j][m];
            }

            r_Au[k] += r_Auk;
          }
        }
      }
    } //end Layer by layer

    // write out
    for(int es=0;es<p_NelementsPerBlk;++es;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){
          if(r_e<Nelements){
            const dlong id = element*p_Np + j*p_Nq + i;

#pragma unroll p_Nq
            for (int k=0;k<p_Nq;k++) {
              Aq[id+k*p_Nq*p_Nq] = r_Au[k];
            }
          }
        }
      }
    }
  }
}

// V10 - Swirydowicz et al
@kernel void hipBoneLocalAx_v10(const dlong Nelements,
			    @restrict const  dlong  *  elementList,
			    @restrict const  dfloat *  ggeo,
			    @restrict const  dfloat *  D,
			    const dfloat lambda,
			    @restrict const  dfloat *  q,
			    @restrict dfloat *  Aq){
  
  // V10
  for(int e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_D[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w[p_Nq][p_Nq+p_pad];
    
    @exclusive dfloat r_ut, r_GDut, r_Auk;
    @exclusive dfloat r_u[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Au[p_Nq];// array for results Au(i,j,0:N)
    
    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    
    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        // load pencil of u into register
        const int base = i + j*p_Nq + e*p_Np;
        for(int k = 0; k < p_Nq; k++) {
          r_u[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
          r_Au[k] = 0.f; // zero the accumulator
        }
	
	element = elementList[e];
      }
    }
    
    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	    
	  // prefetch geometric factors
	    
	  const int gbase = element*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

	  r_G00 = ggeo[gbase+p_G00ID*p_Np];
	  r_G01 = ggeo[gbase+p_G01ID*p_Np];
	  r_G02 = ggeo[gbase+p_G02ID*p_Np];

	  r_G11 = ggeo[gbase+p_G11ID*p_Np];
	  r_G12 = ggeo[gbase+p_G12ID*p_Np];
	  r_G22 = ggeo[gbase+p_G22ID*p_Np];

	  r_GwJ = ggeo[gbase+p_GWJID*p_Np];
	}
      }

      // @barrier();

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // share u(:,:,k)
	  s_u[j][i] = r_u[k];

	  r_ut = 0;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    r_ut += s_D[k][m]*r_u[m];
	  }
	}
      }

      // @barrier();

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  dfloat ur = 0.f;
	  dfloat us = 0.f;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    ur += s_D[i][m]*s_u[j][m];
	    us += s_D[j][m]*s_u[m][i];
	  }

	  s_w[j][i] = (r_G01*ur + r_G11*us + r_G12*r_ut);
	  s_v[j][i] = (r_G00*ur + r_G01*us + r_G02*r_ut);

	  // put this here for a performance bump
	  r_GDut = (r_G02*ur + r_G12*us + r_G22*r_ut);
	  r_Auk = r_GwJ*lambda*r_u[k];
	}
      }

      // @barrier();

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++){
	    r_Auk   += s_D[m][j]*s_w[m][i];
	    r_Au[m] += s_D[k][m]*r_GDut; // DT(m,k)*ut(i,j,k,e)
	    r_Auk   += s_D[m][i]*s_v[j][m];
	  }

	  r_Au[k] += r_Auk;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
	for(int k = 0; k < p_Nq; k++){
	  int id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id] = r_Au[k];
	}
      }
    }
  }
}

// V11
@kernel void hipBoneLocalAx_v11(const dlong Nelements,
			    @restrict const  dlong  *  elementList,
			    @restrict const  dfloat *  ggeo,
			    @restrict const  dfloat *  D,
			    const dfloat lambda,
			    @restrict const  dfloat *  q,
			    @restrict dfloat *  Aq){
  
  // V11
  // 1. This has to be checked
  for(int e=0; e<Nelements; ++e; @outer(0)){
#if p_Nq==16 || p_Nq==8 
#define p_pad 1
#else
#define p_pad 0
#endif
    
    @shared dfloat s_D[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w1[p_Nq][p_Nq+p_pad];
    
    @exclusive dfloat r_ut0, r_GDut0, r_Auk0;
    @exclusive dfloat r_ut1, r_GDut1, r_Auk1;
    
    @exclusive dfloat r_u[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Au[p_Nq];// array for results Au(i,j,0:N)
    
    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        // load pencil of u into register
        const int base = i + j*p_Nq + e*p_Np;
        for(int k = 0; k < p_Nq; k++) {
          r_u[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
          r_Au[k] = 0.f; // zero the accumulator
        }
	
	element = elementList[e];
      }
    }

    // Layer by layer
#if OCCA_USE_CUDA==1
#pragma unroll
#else
#pragma nounroll
#endif
    for(int k = 0;k < (p_Nq+1)/2; k++){
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // share u(:,:,k)
	  s_u0[j][i] = r_u[k];
	  s_u1[j][i] = r_u[p_Nq-1-k];
	  
	  r_ut0 = 0;
	  r_ut1 = 0;
	    
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dkm = s_D[k][m];
	    r_ut0 += Dkm*r_u[m];
	    r_ut1 -= Dkm*r_u[p_Nq-1-m];
	  }
	}
      }
      
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  dfloat ur0 = 0.f, ur1 = 0.f;
	  dfloat us0 = 0.f, us1 = 0.f;
	  
#pragma unroll
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dim = s_D[i][m];
	    ur0 += Dim*s_u0[j][m];
	    ur1 += Dim*s_u1[j][m];
	  }

#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Djm = s_D[j][m];
	    us0 += Djm*s_u0[m][i];
	    us1 += Djm*s_u1[m][i];
	  }

	  {
	    const int gbase = element*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    
	    const dfloat r_G00_0 = ggeo[gbase+p_G00ID*p_Np];
	    const dfloat r_G01_0 = ggeo[gbase+p_G01ID*p_Np];
	    const dfloat r_G11_0 = ggeo[gbase+p_G11ID*p_Np];
	    const dfloat r_GwJ_0 = lambda*ggeo[gbase+p_GWJID*p_Np];
	    const dfloat r_G02_0 = ggeo[gbase+p_G02ID*p_Np];
	    const dfloat r_G12_0 = ggeo[gbase+p_G12ID*p_Np];
	    const dfloat r_G22_0 = ggeo[gbase+p_G22ID*p_Np];

	    dfloat w0 = r_G01_0*ur0;
	    w0 += r_G11_0*us0;
	    w0 += r_G12_0*r_ut0;
	    s_w0[j][i] = w0;
	    
	    dfloat v0 = r_G00_0*ur0;
	    v0 += r_G01_0*us0;
	    v0 += r_G02_0*r_ut0;
	    s_v0[j][i] = v0;
	    
	    r_GDut0 = (r_G02_0*ur0 + r_G12_0*us0 + r_G22_0*r_ut0);
	    r_Auk0 = r_GwJ_0*r_u[k];
	  }
	  
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;
	  if(notMiddle){

	    const int gbase = element*p_Nggeo*p_Np + (p_Nq-1-k)*p_Nq*p_Nq + j*p_Nq + i;
	    
	    const dfloat r_G00_1 = ggeo[gbase+p_G00ID*p_Np];
	    const dfloat r_G01_1 = ggeo[gbase+p_G01ID*p_Np];
	    const dfloat r_G11_1 = ggeo[gbase+p_G11ID*p_Np];
	    const dfloat r_GwJ_1 = lambda*ggeo[gbase+p_GWJID*p_Np];
	    const dfloat r_G02_1 = ggeo[gbase+p_G02ID*p_Np];
	    const dfloat r_G12_1 = ggeo[gbase+p_G12ID*p_Np];
	    const dfloat r_G22_1 = ggeo[gbase+p_G22ID*p_Np];

	    	    
	    dfloat w1 = r_G01_1*ur1;
	    w1 += r_G11_1*us1;
	    w1 += r_G12_1*r_ut1;
	    s_w1[j][i] = w1;
	    
	    dfloat v1 = r_G00_1*ur1;
	    v1 += r_G01_1*us1;
	    v1 += r_G02_1*r_ut1;
	    s_v1[j][i] = v1;
	    
	    r_GDut1 = (r_G02_1*ur1 + r_G12_1*us1 + r_G22_1*r_ut1);
	    r_Auk1 = r_GwJ_1*r_u[p_Nq-1-k];
	  }
	}
      }
    
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;

#pragma unroll 
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dmj = s_D[m][j];
	    r_Auk0   += Dmj*s_w0[m][i];
	    r_Auk1   += Dmj*s_w1[m][i];

	    dfloat Dmi = s_D[m][i];
	    r_Auk0   += Dmi*s_v0[j][m];
	    r_Auk1   += Dmi*s_v1[j][m];
	  }
	  
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dkm = s_D[k][m];
	    r_Au[m]  += Dkm*r_GDut0; // DT(m,k)*ut(i,j,k,e)
	    r_Au[p_Nq-1-m] -= notMiddle*Dkm*r_GDut1; // need to check this
	  }
	  
	  r_Au[k] += r_Auk0;
	  if(notMiddle)
	    r_Au[p_Nq-1-k] += r_Auk1;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll
	for(int k = 0; k < p_Nq; k++){
	  int id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id] = r_Au[k];
	}
      }
    }
  }
}

// V12 - change layout of ggeo
@kernel void hipBoneLocalAx_v12(const dlong Nelements,
			    @restrict const  dlong  *  elementList,
			    @restrict const  dfloat *  ggeo,
			    @restrict const  dfloat *  D,
			    const dfloat lambda,
			    @restrict const  dfloat *  q,
			    @restrict dfloat *  Aq){
  
  // V12
  // 1. Changed layout of ggeo
  for(int e=0; e<Nelements; ++e; @outer(0)){
#if p_Nq==16 || p_Nq==8 
#define p_pad 1
#else
#define p_pad 0
#endif
    
    @shared dfloat s_D[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w1[p_Nq][p_Nq+p_pad];
    
    @exclusive dfloat r_ut0, r_GDut0, r_Auk0;
    @exclusive dfloat r_ut1, r_GDut1, r_Auk1;
    
    @exclusive dfloat r_u[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Au[p_Nq];// array for results Au(i,j,0:N)
    
    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        // load pencil of u into register
        const int base = i + j*p_Nq + e*p_Np;
        for(int k = 0; k < p_Nq; k++) {
          r_u[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
          r_Au[k] = 0.f; // zero the accumulator
        }
	
	element = elementList[e];
      }
    }

    // Layer by layer
#if OCCA_USE_CUDA==1
#pragma unroll
#else
#pragma nounroll
#endif
    for(int k = 0;k < (p_Nq+1)/2; k++){
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // share u(:,:,k)
	  s_u0[j][i] = r_u[k];
	  s_u1[j][i] = r_u[p_Nq-1-k];
	  
	  r_ut0 = 0;
	  r_ut1 = 0;
	    
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dkm = s_D[k][m];
	    r_ut0 += Dkm*r_u[m];
	    r_ut1 -= Dkm*r_u[p_Nq-1-m];
	  }
	}
      }
      
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  dfloat ur0 = 0.f, ur1 = 0.f;
	  dfloat us0 = 0.f, us1 = 0.f;
	  
#pragma unroll
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dim = s_D[i][m];
	    ur0 += Dim*s_u0[j][m];
	    ur1 += Dim*s_u1[j][m];
	  }

#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Djm = s_D[j][m];
	    us0 += Djm*s_u0[m][i];
	    us1 += Djm*s_u1[m][i];
	  }

	  {
	    // changed striding
	    const int gbase = p_Nggeo*(element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i);
	    
	    const dfloat r_G00_0 = ggeo[gbase+p_G00ID];
	    const dfloat r_G01_0 = ggeo[gbase+p_G01ID];
	    const dfloat r_G11_0 = ggeo[gbase+p_G11ID];
	    const dfloat r_GwJ_0 = lambda*ggeo[gbase+p_GWJID];
	    const dfloat r_G02_0 = ggeo[gbase+p_G02ID];
	    const dfloat r_G12_0 = ggeo[gbase+p_G12ID];
	    const dfloat r_G22_0 = ggeo[gbase+p_G22ID];

	    dfloat w0 = r_G01_0*ur0;
	    w0 += r_G11_0*us0;
	    w0 += r_G12_0*r_ut0;
	    s_w0[j][i] = w0;
	    
	    dfloat v0 = r_G00_0*ur0;
	    v0 += r_G01_0*us0;
	    v0 += r_G02_0*r_ut0;
	    s_v0[j][i] = v0;
	    
	    r_GDut0 = (r_G02_0*ur0 + r_G12_0*us0 + r_G22_0*r_ut0);
	    r_Auk0 = r_GwJ_0*r_u[k];
	  }
	  
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;
	  if(notMiddle){
	    // changed striding
	    const int gbase = p_Nggeo*(element*p_Np + (p_Nq-1-k)*p_Nq*p_Nq + j*p_Nq + i);
	    
	    const dfloat r_G00_1 = ggeo[gbase+p_G00ID];
	    const dfloat r_G01_1 = ggeo[gbase+p_G01ID];
	    const dfloat r_G11_1 = ggeo[gbase+p_G11ID];
	    const dfloat r_GwJ_1 = lambda*ggeo[gbase+p_GWJID];
	    const dfloat r_G02_1 = ggeo[gbase+p_G02ID];
	    const dfloat r_G12_1 = ggeo[gbase+p_G12ID];
	    const dfloat r_G22_1 = ggeo[gbase+p_G22ID];
	    
	    dfloat w1 = r_G01_1*ur1;
	    w1 += r_G11_1*us1;
	    w1 += r_G12_1*r_ut1;
	    s_w1[j][i] = w1;
	    
	    dfloat v1 = r_G00_1*ur1;
	    v1 += r_G01_1*us1;
	    v1 += r_G02_1*r_ut1;
	    s_v1[j][i] = v1;
	    
	    r_GDut1 = (r_G02_1*ur1 + r_G12_1*us1 + r_G22_1*r_ut1);
	    r_Auk1 = r_GwJ_1*r_u[p_Nq-1-k];
	  }
	}
      }
    
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;

#pragma unroll
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dmj = s_D[m][j];
	    r_Auk0   += Dmj*s_w0[m][i];
	    r_Auk1   += Dmj*s_w1[m][i];

	    dfloat Dmi = s_D[m][i];
	    r_Auk0   += Dmi*s_v0[j][m];
	    r_Auk1   += Dmi*s_v1[j][m];
	  }
	  
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dkm = s_D[k][m];
	    r_Au[m]  += Dkm*r_GDut0; // DT(m,k)*ut(i,j,k,e)
	    r_Au[p_Nq-1-m] -= notMiddle*Dkm*r_GDut1; // need to check this
	  }
	  
	  r_Au[k] += r_Auk0;
	  if(notMiddle)
	    r_Au[p_Nq-1-k] += r_Auk1;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll
	for(int k = 0; k < p_Nq; k++){
	  int id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id] = r_Au[k];
	}
      }
    }
  }
}


// V13 - wacky ggeo layout
@kernel void hipBoneLocalAx_v13(const dlong Nelements,
			    @restrict const  dlong  *  elementList,
			    @restrict const  dfloat *  ggeo,
			    @restrict const  dfloat *  D,
			    const dfloat lambda,
			    @restrict const  dfloat *  q,
			    @restrict dfloat *  Aq){
  
  // V13
  // 1. Changed layout of ggeo
  for(int e=0; e<Nelements; ++e; @outer(0)){
#if p_Nq==16 || p_Nq==8 
#define p_pad 1
#else
#define p_pad 0
#endif
    
    @shared dfloat s_D[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w1[p_Nq][p_Nq+p_pad];
    
    @exclusive dfloat r_ut0, r_GDut0, r_Auk0;
    @exclusive dfloat r_ut1, r_GDut1, r_Auk1;
    
    @exclusive dfloat r_u[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Au[p_Nq];// array for results Au(i,j,0:N)
    
    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        // load pencil of u into register
        const int base = i + j*p_Nq + e*p_Np;
        for(int k = 0; k < p_Nq; k++) {
          r_u[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
          r_Au[k] = 0.f; // zero the accumulator
        }
	
	element = elementList[e];
      }
    }

    // Layer by layer
#if OCCA_USE_CUDA==1
#pragma unroll
#else
#pragma nounroll
#endif
    for(int k = 0;k < (p_Nq+1)/2; k++){
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // share u(:,:,k)
	  s_u0[j][i] = r_u[k];
	  s_u1[j][i] = r_u[p_Nq-1-k];
	  
	  r_ut0 = 0;
	  r_ut1 = 0;
	    
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dkm = s_D[k][m];
	    r_ut0 += Dkm*r_u[m];
	    r_ut1 -= Dkm*r_u[p_Nq-1-m];
	  }
	}
      }
      
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  dfloat ur0 = 0.f, ur1 = 0.f;
	  dfloat us0 = 0.f, us1 = 0.f;
	  
#pragma unroll
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dim = s_D[i][m];
	    ur0 += Dim*s_u0[j][m];
	    ur1 += Dim*s_u1[j][m];
	  }

#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Djm = s_D[j][m];
	    us0 += Djm*s_u0[m][i];
	    us1 += Djm*s_u1[m][i];
	  }

	  {
	    // changed striding
	    const int gbase = p_Nggeo*(element*p_Np + 2*k*p_Nq*p_Nq) + j*p_Nq + i;
	    
	    const dfloat r_G00_0 = ggeo[gbase+p_G00ID*p_Nq*p_Nq];
	    const dfloat r_G01_0 = ggeo[gbase+p_G01ID*p_Nq*p_Nq];
	    const dfloat r_G11_0 = ggeo[gbase+p_G11ID*p_Nq*p_Nq];
	    const dfloat r_GwJ_0 = lambda*ggeo[gbase+p_GWJID*p_Nq*p_Nq];
	    const dfloat r_G02_0 = ggeo[gbase+p_G02ID*p_Nq*p_Nq];
	    const dfloat r_G12_0 = ggeo[gbase+p_G12ID*p_Nq*p_Nq];
	    const dfloat r_G22_0 = ggeo[gbase+p_G22ID*p_Nq*p_Nq];

	    dfloat w0 = r_G01_0*ur0;
	    w0 += r_G11_0*us0;
	    w0 += r_G12_0*r_ut0;
	    s_w0[j][i] = w0;
	    
	    dfloat v0 = r_G00_0*ur0;
	    v0 += r_G01_0*us0;
	    v0 += r_G02_0*r_ut0;
	    s_v0[j][i] = v0;
	    
	    r_GDut0 = (r_G02_0*ur0 + r_G12_0*us0 + r_G22_0*r_ut0);
	    r_Auk0 = r_GwJ_0*r_u[k];
	  }
	  
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;
	  if(notMiddle){
	    // changed striding
	    const int gbase = p_Nggeo*(element*p_Np + (2*k+1)*p_Nq*p_Nq) + j*p_Nq + i;
	    
	    const dfloat r_G00_1 = ggeo[gbase+p_G00ID*p_Nq*p_Nq];
	    const dfloat r_G01_1 = ggeo[gbase+p_G01ID*p_Nq*p_Nq];
	    const dfloat r_G11_1 = ggeo[gbase+p_G11ID*p_Nq*p_Nq];
	    const dfloat r_GwJ_1 = lambda*ggeo[gbase+p_GWJID*p_Nq*p_Nq];
	    const dfloat r_G02_1 = ggeo[gbase+p_G02ID*p_Nq*p_Nq];
	    const dfloat r_G12_1 = ggeo[gbase+p_G12ID*p_Nq*p_Nq];
	    const dfloat r_G22_1 = ggeo[gbase+p_G22ID*p_Nq*p_Nq];
	    
	    dfloat w1 = r_G01_1*ur1;
	    w1 += r_G11_1*us1;
	    w1 += r_G12_1*r_ut1;
	    s_w1[j][i] = w1;
	    
	    dfloat v1 = r_G00_1*ur1;
	    v1 += r_G01_1*us1;
	    v1 += r_G02_1*r_ut1;
	    s_v1[j][i] = v1;
	    
	    r_GDut1 = (r_G02_1*ur1 + r_G12_1*us1 + r_G22_1*r_ut1);
	    r_Auk1 = r_GwJ_1*r_u[p_Nq-1-k];
	  }
	}
      }
    
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;

#pragma unroll
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dmj = s_D[m][j];
	    r_Auk0   += Dmj*s_w0[m][i];
	    r_Auk1   += Dmj*s_w1[m][i];

	    dfloat Dmi = s_D[m][i];
	    r_Auk0   += Dmi*s_v0[j][m];
	    r_Auk1   += Dmi*s_v1[j][m];
	  }
	  
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dkm = s_D[k][m];
	    r_Au[m]  += Dkm*r_GDut0; // DT(m,k)*ut(i,j,k,e)
	    r_Au[p_Nq-1-m] -= notMiddle*Dkm*r_GDut1; // need to check this
	  }
	  
	  r_Au[k] += r_Auk0;
	  if(notMiddle)
	    r_Au[p_Nq-1-k] += r_Auk1;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll
	for(int k = 0; k < p_Nq; k++){
	  int id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id] = r_Au[k];
	}
      }
    }
  }
}


// V14 - separate ggeo
@kernel void hipBoneLocalAx_v14(const dlong Nelements,
			    @restrict const  dlong  *  elementList,
			    @restrict const  dfloat *  G00,
			    @restrict const  dfloat *  G01,
			    @restrict const  dfloat *  G02,
			    @restrict const  dfloat *  G11,
			    @restrict const  dfloat *  G12,
			    @restrict const  dfloat *  G22,
			    @restrict const  dfloat *  GwJ,
			    @restrict const  dfloat *  D,
			    const dfloat lambda,
			    @restrict const  dfloat *  q,
			    @restrict dfloat *  Aq){
  
  // V14
  // 1. Changed layout of ggeo
  for(int e=0; e<Nelements; ++e; @outer(0)){
#if p_Nq==16 || p_Nq==8 
#define p_pad 1
#else
#define p_pad 0
#endif
    
    @shared dfloat s_D[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w1[p_Nq][p_Nq+p_pad];
    
    @exclusive dfloat r_ut0, r_GDut0, r_Auk0;
    @exclusive dfloat r_ut1, r_GDut1, r_Auk1;
    
    @exclusive dfloat r_u[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Au[p_Nq];// array for results Au(i,j,0:N)
    
    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        // load pencil of u into register
        const int base = i + j*p_Nq + e*p_Np;
        for(int k = 0; k < p_Nq; k++) {
          r_u[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
          r_Au[k] = 0.f; // zero the accumulator
        }
	
	element = elementList[e];
      }
    }

    // Layer by layer
#if OCCA_USE_CUDA==1
#pragma unroll
#else
#pragma nounroll
#endif
    for(int k = 0;k < (p_Nq+1)/2; k++){
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // share u(:,:,k)
	  s_u0[j][i] = r_u[k];
	  s_u1[j][i] = r_u[p_Nq-1-k];
	  
	  r_ut0 = 0;
	  r_ut1 = 0;
	    
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dkm = s_D[k][m];
	    r_ut0 += Dkm*r_u[m];
	    r_ut1 -= Dkm*r_u[p_Nq-1-m];
	  }
	}
      }
      
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  dfloat ur0 = 0.f, ur1 = 0.f;
	  dfloat us0 = 0.f, us1 = 0.f;
	  
#pragma unroll
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dim = s_D[i][m];
	    ur0 += Dim*s_u0[j][m];
	    ur1 += Dim*s_u1[j][m];
	  }

#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Djm = s_D[j][m];
	    us0 += Djm*s_u0[m][i];
	    us1 += Djm*s_u1[m][i];
	  }

	  {
	    // changed striding
	    const int gbase = element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    
	    const dfloat r_G00_0 = G00[gbase];
	    const dfloat r_G01_0 = G01[gbase];
	    const dfloat r_G11_0 = G11[gbase];
	    const dfloat r_G02_0 = G02[gbase];
	    const dfloat r_G12_0 = G12[gbase];
	    const dfloat r_G22_0 = G22[gbase];
	    const dfloat r_GwJ_0 = lambda*GwJ[gbase];

	    dfloat w0 = r_G01_0*ur0;
	    w0 += r_G11_0*us0;
	    w0 += r_G12_0*r_ut0;
	    s_w0[j][i] = w0;
	    
	    dfloat v0 = r_G00_0*ur0;
	    v0 += r_G01_0*us0;
	    v0 += r_G02_0*r_ut0;
	    s_v0[j][i] = v0;
	    
	    r_GDut0 = (r_G02_0*ur0 + r_G12_0*us0 + r_G22_0*r_ut0);
	    r_Auk0 = r_GwJ_0*r_u[k];
	  }
	  
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;
	  if(notMiddle){
	    // changed striding
	    const int gbase = element*p_Np + (p_Nq-1-k)*p_Nq*p_Nq + j*p_Nq + i;
	    
	    const dfloat r_G00_1 = G00[gbase];
	    const dfloat r_G01_1 = G01[gbase];
	    const dfloat r_G11_1 = G11[gbase];
	    const dfloat r_G02_1 = G02[gbase];
	    const dfloat r_G12_1 = G12[gbase];
	    const dfloat r_G22_1 = G22[gbase];
	    const dfloat r_GwJ_1 = lambda*GwJ[gbase];

	    
	    dfloat w1 = r_G01_1*ur1;
	    w1 += r_G11_1*us1;
	    w1 += r_G12_1*r_ut1;
	    s_w1[j][i] = w1;
	    
	    dfloat v1 = r_G00_1*ur1;
	    v1 += r_G01_1*us1;
	    v1 += r_G02_1*r_ut1;
	    s_v1[j][i] = v1;
	    
	    r_GDut1 = (r_G02_1*ur1 + r_G12_1*us1 + r_G22_1*r_ut1);
	    r_Auk1 = r_GwJ_1*r_u[p_Nq-1-k];
	  }
	}
      }
    
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;

#pragma unroll
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dmj = s_D[m][j];
	    r_Auk0   += Dmj*s_w0[m][i];
	    r_Auk1   += Dmj*s_w1[m][i];

	    dfloat Dmi = s_D[m][i];
	    r_Auk0   += Dmi*s_v0[j][m];
	    r_Auk1   += Dmi*s_v1[j][m];
	  }
	  
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dkm = s_D[k][m];
	    r_Au[m]  += Dkm*r_GDut0; // DT(m,k)*ut(i,j,k,e)
	    r_Au[p_Nq-1-m] -= notMiddle*Dkm*r_GDut1; // need to check this
	  }
	  
	  r_Au[k] += r_Auk0;
	  if(notMiddle)
	    r_Au[p_Nq-1-k] += r_Auk1;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll
	for(int k = 0; k < p_Nq; k++){
	  int id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id] = r_Au[k];
	}
      }
    }
  }
}

typedef struct {

  dfloat G00, G01, G02, G11, G12, G22, GwJ;
  
}dfloat7;


// V15 - stupid dfloat7 ggeo
@kernel void hipBoneLocalAx(const dlong Nelements,
			    @restrict const  dlong  *  elementList,
			    @restrict const  dfloat7 *  ggeo,
			    @restrict const  dfloat *  D,
			    const dfloat lambda,
			    @restrict const  dfloat *  q,
			    @restrict dfloat *  Aq){
  
  // V15
  // 1. ggeo struct
  for(int e=0; e<Nelements; ++e; @outer(0)){
#if p_Nq==16 || p_Nq==8 
#define p_pad 1
#else
#define p_pad 0
#endif
    
    @shared dfloat s_D[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w0[p_Nq][p_Nq+p_pad];
    @shared dfloat s_u1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_v1[p_Nq][p_Nq+p_pad];
    @shared dfloat s_w1[p_Nq][p_Nq+p_pad];
    
    @exclusive dfloat r_ut0, r_GDut0, r_Auk0;
    @exclusive dfloat r_ut1, r_GDut1, r_Auk1;
    
    @exclusive dfloat r_u[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Au[p_Nq];// array for results Au(i,j,0:N)
    
    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        // load pencil of u into register
        const int base = i + j*p_Nq + e*p_Np;
        for(int k = 0; k < p_Nq; k++) {
          r_u[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
          r_Au[k] = 0.f; // zero the accumulator
        }
	
	element = elementList[e];
      }
    }

    // Layer by layer
#if OCCA_USE_CUDA==1
#pragma unroll
#else
#pragma nounroll
#endif
    for(int k = 0;k < (p_Nq+1)/2; k++){
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // share u(:,:,k)
	  s_u0[j][i] = r_u[k];
	  s_u1[j][i] = r_u[p_Nq-1-k];
	  
	  r_ut0 = 0;
	  r_ut1 = 0;
	    
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dkm = s_D[k][m];
	    r_ut0 += Dkm*r_u[m];
	    r_ut1 -= Dkm*r_u[p_Nq-1-m];
	  }
	}
      }
      
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  dfloat ur0 = 0.f, ur1 = 0.f;
	  dfloat us0 = 0.f, us1 = 0.f;
	  
#pragma unroll
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dim = s_D[i][m];
	    ur0 += Dim*s_u0[j][m];
	    ur1 += Dim*s_u1[j][m];
	  }

#pragma unroll 
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Djm = s_D[j][m];
	    us0 += Djm*s_u0[m][i];
	    us1 += Djm*s_u1[m][i];
	  }

	  {
	    // changed striding
	    const int gbase = element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    const dfloat7 r_ggeo = ggeo[gbase];
	    
	    const dfloat r_G00_0 = r_ggeo.G00;
	    const dfloat r_G01_0 = r_ggeo.G01;
	    const dfloat r_G11_0 = r_ggeo.G11;
	    const dfloat r_GwJ_0 = lambda*r_ggeo.GwJ;
	    const dfloat r_G02_0 = r_ggeo.G02;
	    const dfloat r_G12_0 = r_ggeo.G12;
	    const dfloat r_G22_0 = r_ggeo.G22;

	    dfloat w0 = r_G01_0*ur0;
	    w0 += r_G11_0*us0;
	    w0 += r_G12_0*r_ut0;
	    s_w0[j][i] = w0;
	    
	    dfloat v0 = r_G00_0*ur0;
	    v0 += r_G01_0*us0;
	    v0 += r_G02_0*r_ut0;
	    s_v0[j][i] = v0;
	    
	    r_GDut0 = (r_G02_0*ur0 + r_G12_0*us0 + r_G22_0*r_ut0);
	    r_Auk0 = r_GwJ_0*r_u[k];
	  }
	  
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;
	  if(notMiddle){

	    const int gbase = element*p_Np + (p_Nq-1-k)*p_Nq*p_Nq + j*p_Nq + i;
	    const dfloat7 r_ggeo = ggeo[gbase];
	    
	    const dfloat r_G00_1 = r_ggeo.G00;
	    const dfloat r_G01_1 = r_ggeo.G01;
	    const dfloat r_G11_1 = r_ggeo.G11;
	    const dfloat r_GwJ_1 = lambda*r_ggeo.GwJ;
	    const dfloat r_G02_1 = r_ggeo.G02;
	    const dfloat r_G12_1 = r_ggeo.G12;
	    const dfloat r_G22_1 = r_ggeo.G22;
	    
	    dfloat w1 = r_G01_1*ur1;
	    w1 += r_G11_1*us1;
	    w1 += r_G12_1*r_ut1;
	    s_w1[j][i] = w1;
	    
	    dfloat v1 = r_G00_1*ur1;
	    v1 += r_G01_1*us1;
	    v1 += r_G02_1*r_ut1;
	    s_v1[j][i] = v1;
	    
	    r_GDut1 = (r_G02_1*ur1 + r_G12_1*us1 + r_G22_1*r_ut1);
	    r_Auk1 = r_GwJ_1*r_u[p_Nq-1-k];
	  }
	}
      }
    
      // @barrier();
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  const int notMiddle = (2*k!=(p_Nq-1)) ? 1:0;

#pragma unroll
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dmj = s_D[m][j];
	    r_Auk0   += Dmj*s_w0[m][i];
	    r_Auk1   += Dmj*s_w1[m][i];

	    dfloat Dmi = s_D[m][i];
	    r_Auk0   += Dmi*s_v0[j][m];
	    r_Auk1   += Dmi*s_v1[j][m];
	  }
	  
#pragma unroll 
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dkm = s_D[k][m];
	    r_Au[m]  += Dkm*r_GDut0; // DT(m,k)*ut(i,j,k,e)
	    r_Au[p_Nq-1-m] -= notMiddle*Dkm*r_GDut1; // need to check this
	  }
	  
	  r_Au[k] += r_Auk0;
	  if(notMiddle)
	    r_Au[p_Nq-1-k] += r_Auk1;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll
	for(int k = 0; k < p_Nq; k++){
	  int id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id] = r_Au[k];
	}
      }
    }
  }
}




#elif USE_3D_SHMEM
//This kernel stores the entire hex element in shmem.
// Good for low orders, but exceeds shmem capacity beyond degree 8

#if p_N==1
#define p_NelementsPerBlk 32
#elif p_N==2
#define p_NelementsPerBlk 9
#elif p_N==3
#define p_NelementsPerBlk 4
#elif p_N==4
#define p_NelementsPerBlk 2
#elif p_N==5
#define p_NelementsPerBlk 2
#elif p_N==6
#define p_NelementsPerBlk 1
#else
// unoptimized
#define p_NelementsPerBlk 1
#endif

@kernel void hipBoneLocalAx(const dlong Nelements,
			    @restrict const  dlong  *  elementList,
			    @restrict const  dfloat *  ggeo,
			    @restrict const  dfloat *  D,
			    const dfloat lambda,
			    @restrict const  dfloat *  q,
			    @restrict dfloat *  Aq){

  //padding for bank conflicts
#if p_Nq==8 || p_Nq==4
#define p_pad 1
#else
#define p_pad 0
#endif

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerBlk;@outer(0)){

    @shared dfloat s_D [p_Nq][p_Nq+p_pad];
    @shared dfloat s_DT[p_Nq][p_Nq+p_pad];
    @shared dfloat   s_q[p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqr[p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqs[p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqt[p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];

    @exclusive dlong r_e, element;

    @exclusive int k, es;

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          //load operators
          if(ke==0){
            const int id = j*p_Nq+i;
            const dfloat Dji = D[id];
            s_D[j][i] = Dji;
            s_DT[i][j] = Dji;
          }

          k  = ke%p_Nq;
          es = ke/p_Nq;
          r_e = es+eo;

          if(r_e<Nelements){
            element = elementList[r_e];
            const dlong id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
	    s_q[es][k][j][i] = q[id];
          }
        }
      }
    }

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if(r_e<Nelements){
            const dlong gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;

            // 't' terms
            dfloat tmp=0.0;

            const dfloat G02 = ggeo[gbase+p_G02ID*p_Np];
            const dfloat G12 = ggeo[gbase+p_G12ID*p_Np];
            const dfloat G22 = ggeo[gbase+p_G22ID*p_Np];

            // #pragma unroll p_Unr
            for(int m = 0; m < p_Nq; ++m) {
              const dfloat pmji = s_q[es][m][j][i];
              const dfloat Dkm = s_DT[m][k];
              tmp += Dkm*pmji;
            }


            s_Gqr[es][k][j][i] = G02*tmp;
            s_Gqs[es][k][j][i] = G12*tmp;
            s_Gqt[es][k][j][i] = G22*tmp;

            const dfloat G00 = ggeo[gbase+p_G00ID*p_Np];
            const dfloat G01 = ggeo[gbase+p_G01ID*p_Np];

            // 'r' terms
            tmp = 0;
            // #pragma unroll p_Unr
            for(int m = 0; m < p_Nq; ++m) {
              const dfloat Dim = s_D[i][m];
              tmp += Dim*s_q[es][k][j][m];
            }

            s_Gqr[es][k][j][i] += G00*tmp;
            s_Gqs[es][k][j][i] += G01*tmp;
            s_Gqt[es][k][j][i] += G02*tmp;

            const dfloat G11 = ggeo[gbase+p_G11ID*p_Np];

            // 's' terms
            tmp = 0;
            // #pragma unroll p_Unr
            for(int m = 0; m < p_Nq; ++m) {
              const dfloat Djm = s_D[j][m];
              tmp += Djm*s_q[es][k][m][i];
            }

            s_Gqr[es][k][j][i] += G01*tmp;
            s_Gqs[es][k][j][i] += G11*tmp;
            s_Gqt[es][k][j][i] += G12*tmp;
          }
        }
      }
    }

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if(r_e<Nelements){
            const dlong gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
            const dfloat GWJ = ggeo[gbase+p_GWJID*p_Np];

            dfloat tmpAp = s_q[es][k][j][i]*lambda*GWJ;

            // use same matrix for both slices
            // #pragma unroll p_Unr
            for(int m=0;m<p_Nq;++m){
              const dfloat Dmi = s_D[m][i];
              const dfloat Dmj = s_D[m][j];

              tmpAp += Dmi*s_Gqr[es][k][j][m];
              tmpAp += Dmj*s_Gqs[es][k][m][i];
            }

            // #pragma unroll p_Unr
            for(int m=0;m<p_Nq;++m){
              const dfloat Gpt = s_Gqt[es][m][j][i];
              const dfloat Dmk = s_D[m][k];
              tmpAp += Dmk*Gpt;
            }

            const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
            Aq[base] = tmpAp;
          }
        }
      }
    }
  }
}

#endif
